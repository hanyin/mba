package com.hy.mvp.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hy.mvp.greendao.bean.ContactsPortraitConverter;
import com.hy.mvp.ui.bean.ContactsPortrait;

import com.hy.mvp.ui.bean.Invitation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INVITATION".
*/
public class InvitationDao extends AbstractDao<Invitation, Long> {

    public static final String TABLENAME = "INVITATION";

    /**
     * Properties of entity Invitation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property InviterId = new Property(2, String.class, "inviterId", false, "INVITER_ID");
        public final static Property InviteeId = new Property(3, String.class, "inviteeId", false, "INVITEE_ID");
        public final static Property Message = new Property(4, String.class, "message", false, "MESSAGE");
        public final static Property Status = new Property(5, int.class, "status", false, "STATUS");
        public final static Property Invite_time = new Property(6, long.class, "invite_time", false, "INVITE_TIME");
        public final static Property WayType = new Property(7, int.class, "wayType", false, "WAY_TYPE");
        public final static Property Friend_name = new Property(8, String.class, "friend_name", false, "FRIEND_NAME");
        public final static Property Friend_school = new Property(9, String.class, "friend_school", false, "FRIEND_SCHOOL");
        public final static Property Friend_portrait = new Property(10, String.class, "friend_portrait", false, "FRIEND_PORTRAIT");
    }

    private final ContactsPortraitConverter friend_portraitConverter = new ContactsPortraitConverter();

    public InvitationDao(DaoConfig config) {
        super(config);
    }
    
    public InvitationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INVITATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"ID\" TEXT," + // 1: id
                "\"INVITER_ID\" TEXT," + // 2: inviterId
                "\"INVITEE_ID\" TEXT," + // 3: inviteeId
                "\"MESSAGE\" TEXT," + // 4: message
                "\"STATUS\" INTEGER NOT NULL ," + // 5: status
                "\"INVITE_TIME\" INTEGER NOT NULL ," + // 6: invite_time
                "\"WAY_TYPE\" INTEGER NOT NULL ," + // 7: wayType
                "\"FRIEND_NAME\" TEXT," + // 8: friend_name
                "\"FRIEND_SCHOOL\" TEXT," + // 9: friend_school
                "\"FRIEND_PORTRAIT\" TEXT);"); // 10: friend_portrait
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INVITATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Invitation entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String inviterId = entity.getInviterId();
        if (inviterId != null) {
            stmt.bindString(3, inviterId);
        }
 
        String inviteeId = entity.getInviteeId();
        if (inviteeId != null) {
            stmt.bindString(4, inviteeId);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(5, message);
        }
        stmt.bindLong(6, entity.getStatus());
        stmt.bindLong(7, entity.getInvite_time());
        stmt.bindLong(8, entity.getWayType());
 
        String friend_name = entity.getFriend_name();
        if (friend_name != null) {
            stmt.bindString(9, friend_name);
        }
 
        String friend_school = entity.getFriend_school();
        if (friend_school != null) {
            stmt.bindString(10, friend_school);
        }
 
        ContactsPortrait friend_portrait = entity.getFriend_portrait();
        if (friend_portrait != null) {
            stmt.bindString(11, friend_portraitConverter.convertToDatabaseValue(friend_portrait));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Invitation entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String inviterId = entity.getInviterId();
        if (inviterId != null) {
            stmt.bindString(3, inviterId);
        }
 
        String inviteeId = entity.getInviteeId();
        if (inviteeId != null) {
            stmt.bindString(4, inviteeId);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(5, message);
        }
        stmt.bindLong(6, entity.getStatus());
        stmt.bindLong(7, entity.getInvite_time());
        stmt.bindLong(8, entity.getWayType());
 
        String friend_name = entity.getFriend_name();
        if (friend_name != null) {
            stmt.bindString(9, friend_name);
        }
 
        String friend_school = entity.getFriend_school();
        if (friend_school != null) {
            stmt.bindString(10, friend_school);
        }
 
        ContactsPortrait friend_portrait = entity.getFriend_portrait();
        if (friend_portrait != null) {
            stmt.bindString(11, friend_portraitConverter.convertToDatabaseValue(friend_portrait));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Invitation readEntity(Cursor cursor, int offset) {
        Invitation entity = new Invitation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // inviterId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // inviteeId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // message
            cursor.getInt(offset + 5), // status
            cursor.getLong(offset + 6), // invite_time
            cursor.getInt(offset + 7), // wayType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // friend_name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // friend_school
            cursor.isNull(offset + 10) ? null : friend_portraitConverter.convertToEntityProperty(cursor.getString(offset + 10)) // friend_portrait
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Invitation entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInviterId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInviteeId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMessage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.getInt(offset + 5));
        entity.setInvite_time(cursor.getLong(offset + 6));
        entity.setWayType(cursor.getInt(offset + 7));
        entity.setFriend_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFriend_school(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFriend_portrait(cursor.isNull(offset + 10) ? null : friend_portraitConverter.convertToEntityProperty(cursor.getString(offset + 10)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Invitation entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Invitation entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Invitation entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
