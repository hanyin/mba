package com.hy.mvp.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hy.mvp.greendao.bean.RegisterInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REGISTER_INFO".
*/
public class RegisterInfoDao extends AbstractDao<RegisterInfo, Long> {

    public static final String TABLENAME = "REGISTER_INFO";

    /**
     * Properties of entity RegisterInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Realname = new Property(1, String.class, "realname", false, "REALNAME");
        public final static Property Sex = new Property(2, String.class, "sex", false, "SEX");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property Address1_id = new Property(4, String.class, "address1_id", false, "ADDRESS1_ID");
        public final static Property Address2_id = new Property(5, String.class, "address2_id", false, "ADDRESS2_ID");
        public final static Property Address3_id = new Property(6, String.class, "address3_id", false, "ADDRESS3_ID");
        public final static Property Telnum = new Property(7, String.class, "telnum", false, "TELNUM");
        public final static Property School = new Property(8, String.class, "school", false, "SCHOOL");
        public final static Property Grade = new Property(9, String.class, "grade", false, "GRADE");
        public final static Property Classname = new Property(10, String.class, "classname", false, "CLASSNAME");
        public final static Property Studentid = new Property(11, String.class, "studentid", false, "STUDENTID");
        public final static Property Headicon = new Property(12, String.class, "headicon", false, "HEADICON");
        public final static Property Ispublic = new Property(13, String.class, "ispublic", false, "ISPUBLIC");
        public final static Property Corp = new Property(14, String.class, "corp", false, "CORP");
        public final static Property Dept = new Property(15, String.class, "dept", false, "DEPT");
        public final static Property Post = new Property(16, String.class, "post", false, "POST");
        public final static Property Ysalary_id = new Property(17, String.class, "ysalary_id", false, "YSALARY_ID");
        public final static Property Referee_id = new Property(18, String.class, "referee_id", false, "REFEREE_ID");
        public final static Property Qrcode_pic = new Property(19, String.class, "qrcode_pic", false, "QRCODE_PIC");
        public final static Property Login_name = new Property(20, String.class, "login_name", false, "LOGIN_NAME");
        public final static Property Login_pwd = new Property(21, String.class, "login_pwd", false, "LOGIN_PWD");
        public final static Property Pay_pwd = new Property(22, String.class, "pay_pwd", false, "PAY_PWD");
        public final static Property Registertime = new Property(23, String.class, "registertime", false, "REGISTERTIME");
        public final static Property Bindtel = new Property(24, String.class, "bindtel", false, "BINDTEL");
    }


    public RegisterInfoDao(DaoConfig config) {
        super(config);
    }
    
    public RegisterInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REGISTER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"REALNAME\" TEXT," + // 1: realname
                "\"SEX\" TEXT," + // 2: sex
                "\"NICKNAME\" TEXT," + // 3: nickname
                "\"ADDRESS1_ID\" TEXT," + // 4: address1_id
                "\"ADDRESS2_ID\" TEXT," + // 5: address2_id
                "\"ADDRESS3_ID\" TEXT," + // 6: address3_id
                "\"TELNUM\" TEXT," + // 7: telnum
                "\"SCHOOL\" TEXT," + // 8: school
                "\"GRADE\" TEXT," + // 9: grade
                "\"CLASSNAME\" TEXT," + // 10: classname
                "\"STUDENTID\" TEXT," + // 11: studentid
                "\"HEADICON\" TEXT," + // 12: headicon
                "\"ISPUBLIC\" TEXT," + // 13: ispublic
                "\"CORP\" TEXT," + // 14: corp
                "\"DEPT\" TEXT," + // 15: dept
                "\"POST\" TEXT," + // 16: post
                "\"YSALARY_ID\" TEXT," + // 17: ysalary_id
                "\"REFEREE_ID\" TEXT," + // 18: referee_id
                "\"QRCODE_PIC\" TEXT," + // 19: qrcode_pic
                "\"LOGIN_NAME\" TEXT," + // 20: login_name
                "\"LOGIN_PWD\" TEXT," + // 21: login_pwd
                "\"PAY_PWD\" TEXT," + // 22: pay_pwd
                "\"REGISTERTIME\" TEXT," + // 23: registertime
                "\"BINDTEL\" TEXT);"); // 24: bindtel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REGISTER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RegisterInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(2, realname);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(3, sex);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String address1_id = entity.getAddress1_id();
        if (address1_id != null) {
            stmt.bindString(5, address1_id);
        }
 
        String address2_id = entity.getAddress2_id();
        if (address2_id != null) {
            stmt.bindString(6, address2_id);
        }
 
        String address3_id = entity.getAddress3_id();
        if (address3_id != null) {
            stmt.bindString(7, address3_id);
        }
 
        String telnum = entity.getTelnum();
        if (telnum != null) {
            stmt.bindString(8, telnum);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(9, school);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(10, grade);
        }
 
        String classname = entity.getClassname();
        if (classname != null) {
            stmt.bindString(11, classname);
        }
 
        String studentid = entity.getStudentid();
        if (studentid != null) {
            stmt.bindString(12, studentid);
        }
 
        String headicon = entity.getHeadicon();
        if (headicon != null) {
            stmt.bindString(13, headicon);
        }
 
        String ispublic = entity.getIspublic();
        if (ispublic != null) {
            stmt.bindString(14, ispublic);
        }
 
        String corp = entity.getCorp();
        if (corp != null) {
            stmt.bindString(15, corp);
        }
 
        String dept = entity.getDept();
        if (dept != null) {
            stmt.bindString(16, dept);
        }
 
        String post = entity.getPost();
        if (post != null) {
            stmt.bindString(17, post);
        }
 
        String ysalary_id = entity.getYsalary_id();
        if (ysalary_id != null) {
            stmt.bindString(18, ysalary_id);
        }
 
        String referee_id = entity.getReferee_id();
        if (referee_id != null) {
            stmt.bindString(19, referee_id);
        }
 
        String qrcode_pic = entity.getQrcode_pic();
        if (qrcode_pic != null) {
            stmt.bindString(20, qrcode_pic);
        }
 
        String login_name = entity.getLogin_name();
        if (login_name != null) {
            stmt.bindString(21, login_name);
        }
 
        String login_pwd = entity.getLogin_pwd();
        if (login_pwd != null) {
            stmt.bindString(22, login_pwd);
        }
 
        String pay_pwd = entity.getPay_pwd();
        if (pay_pwd != null) {
            stmt.bindString(23, pay_pwd);
        }
 
        String registertime = entity.getRegistertime();
        if (registertime != null) {
            stmt.bindString(24, registertime);
        }
 
        String bindtel = entity.getBindtel();
        if (bindtel != null) {
            stmt.bindString(25, bindtel);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RegisterInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(2, realname);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(3, sex);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String address1_id = entity.getAddress1_id();
        if (address1_id != null) {
            stmt.bindString(5, address1_id);
        }
 
        String address2_id = entity.getAddress2_id();
        if (address2_id != null) {
            stmt.bindString(6, address2_id);
        }
 
        String address3_id = entity.getAddress3_id();
        if (address3_id != null) {
            stmt.bindString(7, address3_id);
        }
 
        String telnum = entity.getTelnum();
        if (telnum != null) {
            stmt.bindString(8, telnum);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(9, school);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(10, grade);
        }
 
        String classname = entity.getClassname();
        if (classname != null) {
            stmt.bindString(11, classname);
        }
 
        String studentid = entity.getStudentid();
        if (studentid != null) {
            stmt.bindString(12, studentid);
        }
 
        String headicon = entity.getHeadicon();
        if (headicon != null) {
            stmt.bindString(13, headicon);
        }
 
        String ispublic = entity.getIspublic();
        if (ispublic != null) {
            stmt.bindString(14, ispublic);
        }
 
        String corp = entity.getCorp();
        if (corp != null) {
            stmt.bindString(15, corp);
        }
 
        String dept = entity.getDept();
        if (dept != null) {
            stmt.bindString(16, dept);
        }
 
        String post = entity.getPost();
        if (post != null) {
            stmt.bindString(17, post);
        }
 
        String ysalary_id = entity.getYsalary_id();
        if (ysalary_id != null) {
            stmt.bindString(18, ysalary_id);
        }
 
        String referee_id = entity.getReferee_id();
        if (referee_id != null) {
            stmt.bindString(19, referee_id);
        }
 
        String qrcode_pic = entity.getQrcode_pic();
        if (qrcode_pic != null) {
            stmt.bindString(20, qrcode_pic);
        }
 
        String login_name = entity.getLogin_name();
        if (login_name != null) {
            stmt.bindString(21, login_name);
        }
 
        String login_pwd = entity.getLogin_pwd();
        if (login_pwd != null) {
            stmt.bindString(22, login_pwd);
        }
 
        String pay_pwd = entity.getPay_pwd();
        if (pay_pwd != null) {
            stmt.bindString(23, pay_pwd);
        }
 
        String registertime = entity.getRegistertime();
        if (registertime != null) {
            stmt.bindString(24, registertime);
        }
 
        String bindtel = entity.getBindtel();
        if (bindtel != null) {
            stmt.bindString(25, bindtel);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RegisterInfo readEntity(Cursor cursor, int offset) {
        RegisterInfo entity = new RegisterInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // realname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address1_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address2_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address3_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // telnum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // school
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // grade
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // classname
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // studentid
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // headicon
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // ispublic
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // corp
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // dept
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // post
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // ysalary_id
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // referee_id
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // qrcode_pic
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // login_name
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // login_pwd
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // pay_pwd
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // registertime
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // bindtel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RegisterInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRealname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress1_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress2_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddress3_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTelnum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSchool(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGrade(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setClassname(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStudentid(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setHeadicon(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIspublic(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCorp(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDept(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPost(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setYsalary_id(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setReferee_id(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setQrcode_pic(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setLogin_name(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setLogin_pwd(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setPay_pwd(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setRegistertime(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setBindtel(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RegisterInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RegisterInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RegisterInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
