package com.hy.mvp.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hy.mvp.ui.bean.Leaguer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LEAGUER".
*/
public class LeaguerDao extends AbstractDao<Leaguer, Long> {

    public static final String TABLENAME = "LEAGUER";

    /**
     * Properties of entity Leaguer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, long.class, "_id", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Realname = new Property(2, String.class, "realname", false, "REALNAME");
        public final static Property Sex = new Property(3, int.class, "sex", false, "SEX");
        public final static Property Nickname = new Property(4, String.class, "nickname", false, "NICKNAME");
        public final static Property Address1_id = new Property(5, Long.class, "address1_id", false, "ADDRESS1_ID");
        public final static Property Address2_id = new Property(6, Long.class, "address2_id", false, "ADDRESS2_ID");
        public final static Property Address3_id = new Property(7, Long.class, "address3_id", false, "ADDRESS3_ID");
        public final static Property Telnum = new Property(8, String.class, "telnum", false, "TELNUM");
        public final static Property School = new Property(9, String.class, "school", false, "SCHOOL");
        public final static Property Grade = new Property(10, String.class, "grade", false, "GRADE");
        public final static Property Classname = new Property(11, String.class, "classname", false, "CLASSNAME");
        public final static Property Studentid = new Property(12, String.class, "studentid", false, "STUDENTID");
        public final static Property Ispublic = new Property(13, int.class, "ispublic", false, "ISPUBLIC");
        public final static Property Corp = new Property(14, String.class, "corp", false, "CORP");
        public final static Property Dept = new Property(15, String.class, "dept", false, "DEPT");
        public final static Property Post = new Property(16, String.class, "post", false, "POST");
        public final static Property Ysalary_id = new Property(17, Long.class, "ysalary_id", false, "YSALARY_ID");
        public final static Property Referee_id = new Property(18, String.class, "referee_id", false, "REFEREE_ID");
        public final static Property Status = new Property(19, int.class, "status", false, "STATUS");
        public final static Property IsDel = new Property(20, int.class, "isDel", false, "IS_DEL");
        public final static Property Regtime = new Property(21, Long.class, "regtime", false, "REGTIME");
        public final static Property Login_name = new Property(22, String.class, "login_name", false, "LOGIN_NAME");
        public final static Property Login_pwd = new Property(23, String.class, "login_pwd", false, "LOGIN_PWD");
        public final static Property Referee_realname = new Property(24, String.class, "referee_realname", false, "REFEREE_REALNAME");
        public final static Property PortraitIds = new Property(25, String.class, "portraitIds", false, "PORTRAIT_IDS");
        public final static Property Protrait_url = new Property(26, String.class, "protrait_url", false, "PROTRAIT_URL");
        public final static Property Qr_url = new Property(27, String.class, "qr_url", false, "QR_URL");
        public final static Property MainAddress = new Property(28, String.class, "mainAddress", false, "MAIN_ADDRESS");
    }


    public LeaguerDao(DaoConfig config) {
        super(config);
    }
    
    public LeaguerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LEAGUER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: _id
                "\"ID\" TEXT," + // 1: id
                "\"REALNAME\" TEXT," + // 2: realname
                "\"SEX\" INTEGER NOT NULL ," + // 3: sex
                "\"NICKNAME\" TEXT," + // 4: nickname
                "\"ADDRESS1_ID\" INTEGER," + // 5: address1_id
                "\"ADDRESS2_ID\" INTEGER," + // 6: address2_id
                "\"ADDRESS3_ID\" INTEGER," + // 7: address3_id
                "\"TELNUM\" TEXT," + // 8: telnum
                "\"SCHOOL\" TEXT," + // 9: school
                "\"GRADE\" TEXT," + // 10: grade
                "\"CLASSNAME\" TEXT," + // 11: classname
                "\"STUDENTID\" TEXT," + // 12: studentid
                "\"ISPUBLIC\" INTEGER NOT NULL ," + // 13: ispublic
                "\"CORP\" TEXT," + // 14: corp
                "\"DEPT\" TEXT," + // 15: dept
                "\"POST\" TEXT," + // 16: post
                "\"YSALARY_ID\" INTEGER," + // 17: ysalary_id
                "\"REFEREE_ID\" TEXT," + // 18: referee_id
                "\"STATUS\" INTEGER NOT NULL ," + // 19: status
                "\"IS_DEL\" INTEGER NOT NULL ," + // 20: isDel
                "\"REGTIME\" INTEGER," + // 21: regtime
                "\"LOGIN_NAME\" TEXT," + // 22: login_name
                "\"LOGIN_PWD\" TEXT," + // 23: login_pwd
                "\"REFEREE_REALNAME\" TEXT," + // 24: referee_realname
                "\"PORTRAIT_IDS\" TEXT," + // 25: portraitIds
                "\"PROTRAIT_URL\" TEXT," + // 26: protrait_url
                "\"QR_URL\" TEXT," + // 27: qr_url
                "\"MAIN_ADDRESS\" TEXT);"); // 28: mainAddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LEAGUER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Leaguer entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id());
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(3, realname);
        }
        stmt.bindLong(4, entity.getSex());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(5, nickname);
        }
 
        Long address1_id = entity.getAddress1_id();
        if (address1_id != null) {
            stmt.bindLong(6, address1_id);
        }
 
        Long address2_id = entity.getAddress2_id();
        if (address2_id != null) {
            stmt.bindLong(7, address2_id);
        }
 
        Long address3_id = entity.getAddress3_id();
        if (address3_id != null) {
            stmt.bindLong(8, address3_id);
        }
 
        String telnum = entity.getTelnum();
        if (telnum != null) {
            stmt.bindString(9, telnum);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(10, school);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(11, grade);
        }
 
        String classname = entity.getClassname();
        if (classname != null) {
            stmt.bindString(12, classname);
        }
 
        String studentid = entity.getStudentid();
        if (studentid != null) {
            stmt.bindString(13, studentid);
        }
        stmt.bindLong(14, entity.getIspublic());
 
        String corp = entity.getCorp();
        if (corp != null) {
            stmt.bindString(15, corp);
        }
 
        String dept = entity.getDept();
        if (dept != null) {
            stmt.bindString(16, dept);
        }
 
        String post = entity.getPost();
        if (post != null) {
            stmt.bindString(17, post);
        }
 
        Long ysalary_id = entity.getYsalary_id();
        if (ysalary_id != null) {
            stmt.bindLong(18, ysalary_id);
        }
 
        String referee_id = entity.getReferee_id();
        if (referee_id != null) {
            stmt.bindString(19, referee_id);
        }
        stmt.bindLong(20, entity.getStatus());
        stmt.bindLong(21, entity.getIsDel());
 
        Long regtime = entity.getRegtime();
        if (regtime != null) {
            stmt.bindLong(22, regtime);
        }
 
        String login_name = entity.getLogin_name();
        if (login_name != null) {
            stmt.bindString(23, login_name);
        }
 
        String login_pwd = entity.getLogin_pwd();
        if (login_pwd != null) {
            stmt.bindString(24, login_pwd);
        }
 
        String referee_realname = entity.getReferee_realname();
        if (referee_realname != null) {
            stmt.bindString(25, referee_realname);
        }
 
        String portraitIds = entity.getPortraitIds();
        if (portraitIds != null) {
            stmt.bindString(26, portraitIds);
        }
 
        String protrait_url = entity.getProtrait_url();
        if (protrait_url != null) {
            stmt.bindString(27, protrait_url);
        }
 
        String qr_url = entity.getQr_url();
        if (qr_url != null) {
            stmt.bindString(28, qr_url);
        }
 
        String mainAddress = entity.getMainAddress();
        if (mainAddress != null) {
            stmt.bindString(29, mainAddress);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Leaguer entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id());
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(3, realname);
        }
        stmt.bindLong(4, entity.getSex());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(5, nickname);
        }
 
        Long address1_id = entity.getAddress1_id();
        if (address1_id != null) {
            stmt.bindLong(6, address1_id);
        }
 
        Long address2_id = entity.getAddress2_id();
        if (address2_id != null) {
            stmt.bindLong(7, address2_id);
        }
 
        Long address3_id = entity.getAddress3_id();
        if (address3_id != null) {
            stmt.bindLong(8, address3_id);
        }
 
        String telnum = entity.getTelnum();
        if (telnum != null) {
            stmt.bindString(9, telnum);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(10, school);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(11, grade);
        }
 
        String classname = entity.getClassname();
        if (classname != null) {
            stmt.bindString(12, classname);
        }
 
        String studentid = entity.getStudentid();
        if (studentid != null) {
            stmt.bindString(13, studentid);
        }
        stmt.bindLong(14, entity.getIspublic());
 
        String corp = entity.getCorp();
        if (corp != null) {
            stmt.bindString(15, corp);
        }
 
        String dept = entity.getDept();
        if (dept != null) {
            stmt.bindString(16, dept);
        }
 
        String post = entity.getPost();
        if (post != null) {
            stmt.bindString(17, post);
        }
 
        Long ysalary_id = entity.getYsalary_id();
        if (ysalary_id != null) {
            stmt.bindLong(18, ysalary_id);
        }
 
        String referee_id = entity.getReferee_id();
        if (referee_id != null) {
            stmt.bindString(19, referee_id);
        }
        stmt.bindLong(20, entity.getStatus());
        stmt.bindLong(21, entity.getIsDel());
 
        Long regtime = entity.getRegtime();
        if (regtime != null) {
            stmt.bindLong(22, regtime);
        }
 
        String login_name = entity.getLogin_name();
        if (login_name != null) {
            stmt.bindString(23, login_name);
        }
 
        String login_pwd = entity.getLogin_pwd();
        if (login_pwd != null) {
            stmt.bindString(24, login_pwd);
        }
 
        String referee_realname = entity.getReferee_realname();
        if (referee_realname != null) {
            stmt.bindString(25, referee_realname);
        }
 
        String portraitIds = entity.getPortraitIds();
        if (portraitIds != null) {
            stmt.bindString(26, portraitIds);
        }
 
        String protrait_url = entity.getProtrait_url();
        if (protrait_url != null) {
            stmt.bindString(27, protrait_url);
        }
 
        String qr_url = entity.getQr_url();
        if (qr_url != null) {
            stmt.bindString(28, qr_url);
        }
 
        String mainAddress = entity.getMainAddress();
        if (mainAddress != null) {
            stmt.bindString(29, mainAddress);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Leaguer readEntity(Cursor cursor, int offset) {
        Leaguer entity = new Leaguer( //
            cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // realname
            cursor.getInt(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickname
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // address1_id
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // address2_id
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // address3_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // telnum
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // school
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // grade
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // classname
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // studentid
            cursor.getInt(offset + 13), // ispublic
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // corp
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // dept
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // post
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // ysalary_id
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // referee_id
            cursor.getInt(offset + 19), // status
            cursor.getInt(offset + 20), // isDel
            cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21), // regtime
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // login_name
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // login_pwd
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // referee_realname
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // portraitIds
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // protrait_url
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // qr_url
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28) // mainAddress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Leaguer entity, int offset) {
        entity.set_id(cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRealname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.getInt(offset + 3));
        entity.setNickname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress1_id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setAddress2_id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setAddress3_id(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setTelnum(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSchool(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGrade(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setClassname(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStudentid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIspublic(cursor.getInt(offset + 13));
        entity.setCorp(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDept(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPost(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setYsalary_id(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setReferee_id(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setStatus(cursor.getInt(offset + 19));
        entity.setIsDel(cursor.getInt(offset + 20));
        entity.setRegtime(cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21));
        entity.setLogin_name(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setLogin_pwd(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setReferee_realname(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setPortraitIds(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setProtrait_url(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setQr_url(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setMainAddress(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Leaguer entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Leaguer entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Leaguer entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
