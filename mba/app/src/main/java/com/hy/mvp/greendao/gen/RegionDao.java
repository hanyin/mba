package com.hy.mvp.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hy.mvp.greendao.bean.Region;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REGION".
*/
public class RegionDao extends AbstractDao<Region, Long> {

    public static final String TABLENAME = "REGION";

    /**
     * Properties of entity Region.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Id = new Property(1, Long.class, "id", false, "ID");
        public final static Property RegionName = new Property(2, String.class, "regionName", false, "REGION_NAME");
        public final static Property ParentId = new Property(3, Long.class, "parentId", false, "PARENT_ID");
        public final static Property ShortName = new Property(4, String.class, "shortName", false, "SHORT_NAME");
        public final static Property LevelType = new Property(5, int.class, "levelType", false, "LEVEL_TYPE");
        public final static Property CityCode = new Property(6, String.class, "cityCode", false, "CITY_CODE");
        public final static Property ZipCode = new Property(7, String.class, "zipCode", false, "ZIP_CODE");
        public final static Property MergerName = new Property(8, String.class, "mergerName", false, "MERGER_NAME");
        public final static Property Ing = new Property(9, float.class, "ing", false, "ING");
        public final static Property Lat = new Property(10, float.class, "lat", false, "LAT");
        public final static Property Pinyin = new Property(11, String.class, "pinyin", false, "PINYIN");
    }


    public RegionDao(DaoConfig config) {
        super(config);
    }
    
    public RegionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REGION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"ID\" INTEGER," + // 1: id
                "\"REGION_NAME\" TEXT," + // 2: regionName
                "\"PARENT_ID\" INTEGER," + // 3: parentId
                "\"SHORT_NAME\" TEXT," + // 4: shortName
                "\"LEVEL_TYPE\" INTEGER NOT NULL ," + // 5: levelType
                "\"CITY_CODE\" TEXT," + // 6: cityCode
                "\"ZIP_CODE\" TEXT," + // 7: zipCode
                "\"MERGER_NAME\" TEXT," + // 8: mergerName
                "\"ING\" REAL NOT NULL ," + // 9: ing
                "\"LAT\" REAL NOT NULL ," + // 10: lat
                "\"PINYIN\" TEXT);"); // 11: pinyin
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REGION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Region entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String regionName = entity.getRegionName();
        if (regionName != null) {
            stmt.bindString(3, regionName);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(4, parentId);
        }
 
        String shortName = entity.getShortName();
        if (shortName != null) {
            stmt.bindString(5, shortName);
        }
        stmt.bindLong(6, entity.getLevelType());
 
        String cityCode = entity.getCityCode();
        if (cityCode != null) {
            stmt.bindString(7, cityCode);
        }
 
        String zipCode = entity.getZipCode();
        if (zipCode != null) {
            stmt.bindString(8, zipCode);
        }
 
        String mergerName = entity.getMergerName();
        if (mergerName != null) {
            stmt.bindString(9, mergerName);
        }
        stmt.bindDouble(10, entity.getIng());
        stmt.bindDouble(11, entity.getLat());
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(12, pinyin);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Region entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String regionName = entity.getRegionName();
        if (regionName != null) {
            stmt.bindString(3, regionName);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(4, parentId);
        }
 
        String shortName = entity.getShortName();
        if (shortName != null) {
            stmt.bindString(5, shortName);
        }
        stmt.bindLong(6, entity.getLevelType());
 
        String cityCode = entity.getCityCode();
        if (cityCode != null) {
            stmt.bindString(7, cityCode);
        }
 
        String zipCode = entity.getZipCode();
        if (zipCode != null) {
            stmt.bindString(8, zipCode);
        }
 
        String mergerName = entity.getMergerName();
        if (mergerName != null) {
            stmt.bindString(9, mergerName);
        }
        stmt.bindDouble(10, entity.getIng());
        stmt.bindDouble(11, entity.getLat());
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(12, pinyin);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Region readEntity(Cursor cursor, int offset) {
        Region entity = new Region( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // regionName
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // parentId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shortName
            cursor.getInt(offset + 5), // levelType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cityCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // zipCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mergerName
            cursor.getFloat(offset + 9), // ing
            cursor.getFloat(offset + 10), // lat
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // pinyin
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Region entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setRegionName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParentId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setShortName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLevelType(cursor.getInt(offset + 5));
        entity.setCityCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setZipCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMergerName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIng(cursor.getFloat(offset + 9));
        entity.setLat(cursor.getFloat(offset + 10));
        entity.setPinyin(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Region entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Region entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Region entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
